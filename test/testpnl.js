var Oracle = artifacts.require("./Oracle.sol")
var AssetSwap = artifacts.require("./AssetSwap.sol");
let SwapFactory = artifacts.require("./SwapFactory.sol");
var truffleAssert = require('truffle-assertions')
let utils = require('./utils.js')

var ETH_PRICES = [12.88,12.43,11.85,10.76,8.09,8.61,7.80,9.46,9.89,13.35,12.49,13.85,14.49,18.45,13.25,12.77,10.55,10.47,12.48,13.03,10.16,12.07,10.72,10.98,11.63,11.64,11.94,13.74,13.25,13.11,11.72,11.99,11.50,10.86,10.72,10.02,9.69,8.62,8.33,8.21,7.89,7.58,11.00,9.79,10.19,10.48,10.71,11.35,12.92,12.68,17.43,16.51,34.80,41.46,52.88,45.35,46.85,49.66,57.31,85.79,88.33,89.67,183.88,218.34,250.70,335.95,321.66,311.62,264.77,223.92,194.63,203.33,218.00,293.99,301.34,316.50,382.78,337.36,275.48,283.50,309.75,291.40,303.20,313.45,295.46,288.60,307.50,330.59,380.48,420.34,413.71,690.69,794.99,736.45,942.01,1248.00,1017.50,1063.20,1121.30,751.25,919.11,837.79,851.26,737.75,617.30,561.17,447.10,382.65,422.51,516.06,628.59,672.92,748.24,698.36,594.21,547.89,598.35,467.90,534.75,436.85,468.82,434.71,482.82,473.42,419.04,363.17,289.95,271.46,287.93,242.92,180.67,209.42,217.45,216.67,223.19,203.42,201.05,196.50,216.36,170.30,131.52,123.44,108.26,89.82,102.32,128.41,152.25,149.37,121.06,115.38,107.15,102.87,120.09,146.07,129.04,136.13,131.22,137.37,137.78,173.64,181.48,158.91,172.48,152.55,173.29,201.69,248.12,269.00,247.00]
var BTC_PRICES = [417.3,418.1,413.2,422.6,424.8,444,445.1,447.4,452.3,453.5,449.1,536.8,583,696.9,606,639.7,677,653.7,665.8,654.5,566.36,590.3,571.8,580.3,576.2,619.8,613.9,597.4,603.8,614.1,637.6,631.8,678.7,740.83,723.27,745,742,739,765,774.5,830,981.7,1139.6,778.6,887.8,893.3,983.7,1048.8,1013.8,1125.3,1232.8,1149.3,1256.1,1039.1,1041.8,1140.6,1227.4,1260.5,1399.3,1617.8,1796.8,1870,2394.8,2191.8,2642.6,2395,2621.2,2518.2,2598.5,2374.4,2253.1,2525.7,2702,3339.9,4386.3,4129.1,4569,4589.1,3849.7,3873.2,4205.4,4215.1,4824.9,5565,5720,6727.3,7442.4,7278.3,8230.1,9749.4,13527,16181,16425,15374,15155,14896,11082,11414,10284,7587,9455.4,10455,10315,9768.69,8305.21,8902.64,7913.44,6869.05,6914.49,8110.73,8967.09,9106.04,9278.44,8272.96,7603.65,7311.89,7527.18,6279.03,6750.95,6140.7,6609.63,6340.14,7378.04,8151.57,7561.73,6336.35,6389.65,6432.11,7006.81,6900.66,6306.73,6419.03,6491,6435.21,6536.13,6431.81,6422.52,6304.25,6503.46,5391.18,4413.91,4316.67,3872.54,3438.63,3727.54,3775.06,3872.46,4008.49,3591.4,3534.32,3432.41,3363.15,3567.91,3932.49,3725.46,3843.49,3851.75,4013.19,4005.67,5136,5404.94,5021.94,5384.34,5155.36,5739,7892.13,7824.63,8659,7822]
var SPX_PRICES = [2027.22,2036.71,2063.95,2066.66,2082.42,2102.40,2095.15,2051.12,2064.46,2047.63,2090.54,2099.33,2119.12,2071.50,2085.45,2070.77,2099.73,2152.43,2173.02,2166.58,2163.79,2175.49,2182.22,2175.44,2170.95,2186.16,2125.77,2163.12,2171.37,2159.73,2139.18,2144.29,2139.43,2097.94,2163.26,2176.94,2204.72,2198.81,2241.35,2253.28,2265.18,2249.92,2270.75,2275.32,2271.89,2298.37,2279.55,2294.67,2349.25,2362.82,2395.96,2362.98,2385.26,2348.45,2361.13,2352.95,2344.93,2338.17,2387.45,2388.13,2399.63,2357.03,2404.39,2411.80,2433.14,2437.92,2435.61,2440.69,2432.54,2443.25,2473.83,2477.83,2477.57,2474.02,2468.11,2444.04,2457.59,2465.54,2498.37,2508.24,2507.04,2537.74,2555.24,2561.26,2557.15,2579.36,2594.38,2564.62,2597.08,2626.07,2629.27,2662.85,2679.25,2682.62,2713.06,2748.23,2802.56,2837.54,2823.81,2681.66,2698.63,2701.33,2713.83,2726.80,2749.48,2711.93,2605.00,2644.69,2642.19,2708.64,2639.40,2635.67,2697.79,2722.46,2733.29,2724.01,2772.35,2775.63,2767.32,2699.63,2713.22,2793.84,2809.55,2820.40,2816.29,2858.45,2839.96,2862.96,2914.04,2888.60,2888.92,2907.95,2905.97,2925.51,2785.68,2809.21,2656.15,2711.74,2813.87,2701.58,2649.93,2743.79,2700.06,2651.07,2506.96,2467.70,2510.03,2584.96,2616.10,2638.70,2681.05,2731.61,2753.03,2784.70,2792.38,2771.45,2810.92,2824.23,2805.37,2873.40,2888.21,2900.45,2927.25,2923.73,2879.42,2850.96,2856.27,2783.02,2826.15]
var ETHBTC_PRICES = [0.030865,0.029730,0.028679,0.025461,0.019044,0.019392,0.017524,0.021144,0.021866,0.029438,0.027811,0.025801,0.024854,0.026474,0.021865,0.019962,0.015583,0.016017,0.018744,0.019908,0.017939,0.020447,0.018748,0.018921,0.020184,0.018780,0.019449,0.023000,0.021944,0.021348,0.018381,0.018978,0.016944,0.014659,0.014822,0.013450,0.013059,0.011664,0.010889,0.010600,0.009506,0.007721,0.009653,0.012574,0.011478,0.011732,0.010887,0.010822,0.012744,0.011268,0.014139,0.014365,0.027705,0.039900,0.050758,0.039760,0.038170,0.039397,0.040956,0.053029,0.049160,0.047952,0.076783,0.099617,0.094869,0.140271,0.122715,0.123747,0.101893,0.094306,0.086383,0.080504,0.080681,0.088024,0.068700,0.076651,0.083778,0.073513,0.071559,0.073195,0.073655,0.069132,0.062841,0.056325,0.051654,0.042900,0.041317,0.045421,0.046230,0.043114,0.030584,0.042685,0.048401,0.047902,0.062158,0.083781,0.091816,0.093149,0.109033,0.099018,0.097205,0.080133,0.082526,0.075522,0.074327,0.063034,0.056499,0.055706,0.061105,0.063627,0.070100,0.073898,0.080643,0.084415,0.078148,0.074931,0.079492,0.074518,0.079211,0.071140,0.070930,0.068565,0.065440,0.058077,0.055416,0.057315,0.045378,0.042204,0.041093,0.035202,0.028647,0.032625,0.033500,0.033669,0.034147,0.031627,0.031304,0.031169,0.033268,0.031589,0.029797,0.028596,0.027956,0.026121,0.027450,0.034015,0.039316,0.037263,0.033708,0.032646,0.031217,0.030587,0.033658,0.037144,0.034637,0.035418,0.034068,0.034230,0.034396,0.033808,0.033577,0.031643,0.032034,0.029591,0.030195,0.025556,0.031710,0.031066,0.031578]
var LONG_ETH_PNL=[-7.551408,-10.103713,-20.590613,-66.406428,11.797096,-21.100385,34.847780,8.408696,51.612959,-14.091673,19.368448,8.546929,42.691220,-78.908302,-7.828896,-42.448436,-1.830468,31.959856,8.154720,-56.880807,31.396189,-25.524347,4.442987,10.894755,-0.127921,4.732663,25.940175,-7.707321,-2.438978,-24.055717,4.210509,-8.834522,-12.104052,-2.915858,-14.293014,-7.121362,-25.163225,-7.273229,-3.227649,-8.423701,-8.491689,61.975091,-25.056180,7.562610,5.242653,4.001494,10.994449,24.039861,-4.091167,54.285485,-11.461478,104.972615,31.875543,42.956921,-33.558192,6.113020,11.033931,26.436957,66.194277,5.459787,2.693220,102.322705,31.312797,25.554440,50.527727,-9.198486,-6.753411,-35.742290,-36.840974,-30.443282,8.270354,13.178904,51.473179,4.585528,9.294148,34.382805,-27.267115,-45.292609,5.366335,16.674576,-12.913264,7.495317,6.249928,-12.495888,-5.061116,12.011122,13.689918,25.964106,18.694048,-3.509951,80.024160,25.978683,-16.221735,43.408313,48.810414,-45.675086,8.309584,10.078516,-98.963581,36.281430,-19.742099,2.869468,-31.118100,-39.383323,-20.334640,-51.403156,-34.036665,18.596495,36.009857,35.557648,12.895178,19.862777,-14.606323,-35.407529,-17.233866,16.591682,-56.143417,24.739841,-45.188108,13.358954,-16.016761,19.658645,-4.277061,-26.293495,-31.114112,-50.881017,-13.943067,11.157441,-37.413054,-69.313533,27.197971,7.096684,-1.021069,5.551320,-19.766773,-2.661159,-4.937990,18.085829,-54.473917,-59.360477,-13.411017,-28.385664,-41.421487,24.169801,40.396418,31.063888,-4.161980,-47.140352,-10.160496,-15.684685,-8.633664,28.421509,35.325344,-26.734509,10.132138,-7.794841,8.667351,0.296044,41.065803,8.353031,-28.748625,15.458760,-26.468332,23.672659,27.904274,37.181577,15.247450,-18.140486]
var LONG_BTC_PNL=[0.108046,-3.466681,5.850462,1.232236,10.264655,0.269746,0.755961,2.260301,0.213562,-2.993413,43.687821,20.207612,38.064480,-45.928240,14.036119,17.190654,-9.047744,3.567606,-4.423088,-43.658094,8.579588,-9.243908,3.262214,-2.021649,18.526113,-2.685584,-6.164946,2.388450,3.931194,10.282005,-2.589497,18.957846,23.837259,-6.383072,7.634551,-1.428767,-1.557799,8.713826,2.769472,18.251156,47.171136,27.450528,-89.403881,33.326287,1.141292,24.389192,15.257908,-7.658499,27.633884,17.101283,-18.272466,10.843717,-36.566219,0.215298,27.208381,18.052954,6.006624,23.529151,25.827495,26.501390,9.663179,34.031212,-18.162928,44.455248,-17.759739,24.268999,-10.527335,8.941217,-25.937239,-15.125095,28.594055,15.926529,43.487359,76.049399,-14.314155,21.712252,0.822386,-49.787455,1.118529,19.281861,0.214337,34.399605,36.731207,6.989303,44.687915,24.589240,-5.476135,28.080404,41.434896,98.038861,29.155416,2.949460,-17.673354,-3.077271,-3.508019,-78.971076,6.808812,-23.823442,-98.417692,50.015358,28.583304,-3.663774,-15.710572,-45.209546,19.369858,-35.336109,-38.989579,1.158152,35.103716,21.362644,3.268391,3.919421,-29.428643,-24.211637,-10.810461,6.396817,-53.491861,16.112495,-28.122172,17.439770,-11.397318,36.510123,26.348530,-20.860991,-47.177688,2.164297,1.373893,20.705883,-4.933624,-29.435102,3.516943,2.338333,-2.532830,3.442041,-4.789367,-0.744773,-5.094006,6.834114,-54.797953,-59.166044,-6.267645,-29.756035,-34.214808,18.109485,2.240736,5.123942,8.568978,-32.558752,-4.562446,-8.166083,-5.645046,12.717067,20.693897,-15.322983,7.152509,0.168344,9.651031,-0.840945,55.679042,12.166594,-20.659639,16.275963,-12.444744,24.585104,80.264467,-2.042917,24.243306,-26.726411]
var LONG_SPX_PNL=[3.296459,12.455711,-0.205925,8.147582,7.605733,-5.462316,-18.564331,4.786209,-7.150620,20.795574,2.439072,7.576702,-18.826470,7.288447,-8.860222,15.112340,23.778778,6.766852,-4.275207,-3.575227,3.288893,1.794237,-4.497838,-3.364761,5.501419,-28.392025,13.964850,2.399507,-6.933935,-12.321474,0.868752,-3.926969,-22.124280,30.022332,5.160780,11.644534,-4.699552,18.468147,3.878559,3.934546,-8.573632,5.346041,0.575900,-2.889424,9.874474,-9.480351,4.843456,19.577481,4.357251,9.112150,-16.115461,3.761616,-14.212354,3.057187,-5.788715,-4.751312,-4.134815,16.963176,-0.811771,3.220144,-18.965030,9.067010,1.332219,6.399616,0.346668,-2.556183,0.604521,-5.695453,3.432349,12.673975,0.111923,-1.496933,-2.174791,-3.793938,-10.713450,3.343862,1.968426,14.469659,2.381201,-1.810742,11.422161,5.185901,0.827961,-3.293762,7.356331,4.057353,-12.064912,9.693904,8.746254,-0.285978,6.751492,4.047562,-0.261389,7.698318,8.652598,22.407722,10.509418,-6.010253,-77.375059,3.946377,-0.547896,3.077864,3.783751,8.147657,-16.673211,-51.371919,16.049636,-2.214599,19.362442,-22.217895,-2.721280,19.847475,8.190497,2.912388,-5.309038,14.875879,-0.405336,-3.932748,-31.779123,3.294655,30.426894,3.713043,2.408098,-3.340955,15.542243,-9.980802,7.048164,15.406934,-12.125640,-1.867970,4.388871,-2.100356,5.242899,-47.856724,7.621926,-56.645050,19.878705,32.842821,-52.604702,-26.698067,36.140133,-19.882895,-23.676948,-49.035138,-13.673800,13.202536,28.898864,13.013008,7.490188,15.667137,18.080512,5.432177,8.224410,1.423914,-8.526855,13.218410,3.090270,-8.153550,18.051563,3.496331,3.126782,7.131015,-3.055571,-14.661947,-9.780950,0.294708,-25.038291,15.244252]
var LONG_ETHBTC_PNL=[-9.933548,-9.550499,-32.019741,-84.740489,4.118116,-27.064141,42.490943,7.892207,64.026097,-15.022446,-19.880203,-9.914918,14.945975,-53.152424,-24.243531,-70.733219,6.409214,36.051196,14.264165,-27.856374,30.335642,-23.064734,1.914249,15.292044,-19.093131,8.237313,38.280723,-12.423669,-7.365046,-40.789701,7.501166,-30.430639,-39.402688,2.378416,-25.915112,-7.871487,-30.319541,-18.194876,-7.201262,-29.189459,-58.258613,49.736313,57.788303,-24.282562,5.045666,-19.807982,-1.878823,37.385574,-33.171725,50.464990,3.564071,120.180947,76.149389,53.184473,-69.631143,-10.804559,7.422805,9.155585,56.627345,-20.080063,-6.682412,93.637498,57.015433,-12.905758,80.664743,-36.194448,1.713026,-54.075404,-20.517887,-23.339254,-18.659242,0.174279,20.511390,-70.800713,25.596372,20.924418,-35.336155,-7.211775,5.221195,1.188675,-16.755925,-25.439991,-29.339820,-23.016066,-51.465507,-9.967749,22.247553,4.006427,-18.470479,-102.951470,70.605154,29.193470,-2.983182,57.048759,64.244169,21.535812,3.207968,36.099797,-25.698735,-5.044820,-53.716345,6.885104,-23.595075,-4.400430,-45.231504,-29.334816,-3.939201,21.747161,9.549179,22.744506,12.493065,20.566425,10.812757,-20.453570,-11.124308,13.990727,-17.087274,14.458923,-28.780632,-1.116277,-9.011139,-12.331324,-32.117534,-12.397663,7.920597,-66.237893,-19.204738,-7.144197,-42.274867,-57.665750,30.153483,6.164646,0.881746,3.129825,-20.324568,-2.958412,-1.459431,15.422076,-13.682785,-15.432623,-10.890470,-6.106864,-17.963841,11.746981,47.948148,33.383212,-14.169377,-26.780694,-8.519895,-11.836251,-5.531970,22.469543,23.122934,-18.496954,5.146003,-10.296517,0.809947,0.833345,-4.729605,-2.097507,-15.677760,2.681023,-21.045681,4.633329,-45.823804,48.215594,-5.565288,3.684535]
var SHORT_ETH_PNL=[6.929686,9.474346,19.929833,65.608405,-12.360859,20.438077,-35.342495,-8.982609,-52.057453,13.450360,-19.909531,-9.120428,-43.162439,78.072830,7.206343,41.722180,1.225883,-32.463221,-8.729394,56.111319,-31.901243,24.848787,-5.028780,-11.461221,-0.471564,-5.317588,-26.461572,7.085132,1.832571,23.384556,-4.796997,8.208957,11.468692,2.308022,13.651098,6.500929,24.488747,6.652341,2.618879,7.799366,7.867150,-62.388545,24.382022,-8.139058,-5.826050,-4.588609,-11.560617,-24.566950,3.479811,-54.721974,10.828044,-105.257270,-32.379161,-43.427345,32.858567,-6.693810,-11.599980,-26.956866,-66.595093,-6.042534,-3.284253,-102.615298,-31.818100,-26.076992,-50.975473,8.571831,6.134080,35.036122,36.131516,29.752988,-8.844681,-13.738528,-51.918092,-5.170893,-9.865409,-34.878912,26.586335,44.557834,-5.949362,-17.223729,12.275480,-8.071966,-6.830308,11.859355,4.446854,-12.574244,-14.248011,-26.485432,-19.237151,2.900336,-80.383548,-26.499965,15.574042,-43.877385,-49.263304,44.939165,-8.883794,-10.647427,98.068033,-36.771850,19.083860,-3.459973,30.425784,38.666248,19.674626,50.650076,33.335607,-19.139890,-36.501091,-36.050236,-13.455651,-20.402379,13.963469,34.702364,16.583141,-17.141083,55.376138,-25.264834,44.453645,-13.918039,15.369681,-20.198859,3.665147,25.615631,30.421808,50.129502,13.302199,-11.723120,36.701881,68.506802,-27.715600,-7.674527,0.418909,-6.133792,19.108460,2.054086,4.324097,-18.630754,53.711638,58.583561,12.771743,27.701533,40.698308,-24.696501,-40.874511,-31.569938,3.550412,46.400041,9.530959,15.038600,8.008700,-28.935473,-35.818628,26.055324,-10.700889,7.172390,-9.240489,-0.894259,-41.541891,-8.927110,28.063407,-16.011555,25.789944,-24.200848,-28.419788,-37.669301,-15.800877,17.487045]
var SHORT_BTC_PNL=[-0.885198,2.679972,-6.676438,-2.229763,-10.969359,-1.097631,-1.374354,-2.977692,-0.769180,2.191772,-44.364175,-20.924486,-38.653505,44.883901,-14.814310,-18.098474,8.292014,-4.196813,3.704746,42.696234,-9.210906,8.399458,-3.994454,1.313567,-19.275469,1.954428,5.513200,-3.166186,-4.689203,-11.120955,1.856386,-19.739802,-24.631458,5.623278,-8.436946,0.653225,0.714701,-9.489937,-3.530434,-19.031575,-47.951809,-27.967346,88.561184,-34.046847,-1.870538,-25.123086,-15.965617,6.999636,-28.398080,-17.646894,17.480673,-11.199536,35.936696,-0.803327,-28.082913,-18.778941,-6.714186,-24.179038,-26.328514,-27.229823,-10.401971,-34.396954,17.531299,-45.108439,17.200058,-25.052319,9.753171,-9.823926,25.050415,14.262227,-29.311964,-16.626059,-44.043501,-76.781105,13.600079,-22.332386,-1.673361,48.868986,-1.847312,-19.968302,-1.011566,-35.120416,-37.456682,-7.784969,-45.455743,-25.293143,4.778518,-28.732061,-42.113775,-98.800880,-29.604651,-3.601063,16.863736,2.490931,2.941907,78.051174,-7.526574,23.112304,97.298258,-50.628383,-29.406103,2.925642,14.845177,44.313203,-20.194875,34.394759,38.113256,-1.837396,-35.717758,-21.978379,-3.968983,-4.593924,28.625075,23.330181,9.997054,-7.083568,52.532762,-16.768737,27.204093,-18.138625,10.588469,-37.185390,-27.113422,20.013662,46.312308,-3.103692,-2.174978,-21.412982,4.044659,28.426688,-4.163980,-3.060637,1.780130,-4.170131,3.966476,-0.014068,4.326640,-7.515271,53.845105,58.194898,5.468552,28.900872,33.310834,-18.767861,-2.838353,-5.756503,-9.333439,31.633364,3.775524,7.358477,4.863842,-13.359522,-21.310502,14.474002,-7.863448,-0.946408,-10.367454,0.093177,-56.274153,-12.884194,19.803116,-16.966956,11.596759,-25.245341,-80.908859,1.433262,-24.935091,25.909610]
var SHORT_SPX_PNL=[-6.405067,-15.602546,-3.097978,-12.137694,-10.424549,2.150778,16.090758,-7.655774,4.928148,-24.002140,-5.144487,-10.444197,16.470372,-11.465805,5.747458,-18.743620,-26.801701,-9.283679,1.401838,-0.272214,-5.814162,-5.172035,1.568877,0.532431,-8.498842,25.467402,-16.571837,-5.510451,3.901899,8.965672,-3.801196,0.799143,18.947485,-33.061511,-8.370361,-14.746701,1.327162,-21.572588,-6.922408,-7.056219,5.450940,-7.413314,-3.946686,0.007187,-12.791458,6.544776,-7.674294,-22.212930,-7.414034,-11.294594,12.948290,-5.184892,11.694264,-5.409305,2.290589,1.847363,1.304569,-19.562723,-1.192309,-6.133876,16.009861,-10.529975,-3.858737,-9.012380,-2.585394,-0.577094,-3.701177,2.164615,-6.979642,-16.125447,-2.983560,-1.301186,-0.049775,0.867111,7.857147,-5.824400,-5.372327,-18.143537,-5.296334,-0.935020,-14.611076,-8.069146,-3.729859,0.111097,-10.427640,-6.872962,9.274446,-12.300532,-11.461770,-2.762099,-8.548435,-6.653972,-2.977079,-10.043675,-10.917045,-26.087329,-13.380468,3.165697,72.897321,-6.398477,-2.743299,-6.030393,-7.245330,-11.733029,13.373142,47.606520,-19.554928,-0.502378,-21.818609,19.754955,-0.081089,-22.545486,-11.404770,-6.438212,2.055410,-17.622883,-3.431061,1.307783,28.106810,-6.090077,-33.662293,-6.414112,-5.467664,-0.048364,-19.003762,6.223224,-10.252504,-18.235329,8.569778,-2.165683,-6.977019,-0.788860,-8.253698,44.944362,-10.913490,53.609685,-22.948171,-35.567446,48.793310,22.813487,-39.336503,16.462241,20.061050,46.401635,11.283332,-15.732782,-31.956707,-16.714561,-10.637874,-18.897561,-21.205330,-8.002000,-10.690830,-4.819838,5.683103,-16.330664,-5.955961,5.162477,-20.432005,-6.366730,-6.552872,-9.894988,-0.336366,12.020998,7.203380,-2.733326,22.271154,-18.511459]
var SHORT_ETHBTC_PNL=[9.154915,8.773013,31.174949,83.737772,-4.854657,26.234193,-43.112538,-8.617443,-64.583183,14.228570,19.071775,9.136341,-15.650081,52.244329,23.422033,69.772460,-7.138891,-36.692081,-14.970313,27.024054,-30.993648,22.246766,-2.657391,-15.995114,18.287061,-8.961515,-38.914929,11.637577,6.594107,39.918639,-8.227573,29.590607,38.535780,-3.120168,25.088606,7.099031,29.479842,17.391496,6.430814,28.353145,57.335222,-50.336204,-58.364075,23.460947,-5.779428,18.999770,1.124319,-38.022462,32.323482,-51.062699,-4.302271,-120.569820,-76.670160,-53.774036,68.673686,10.023317,-8.149447,-9.877036,-57.206595,19.271036,5.913518,-94.105883,-57.593519,12.118222,-81.171988,35.337150,-2.456772,53.164544,19.707549,22.520464,17.854472,-0.922634,-21.198825,69.839753,-26.268574,-21.610615,34.481428,6.441295,-5.954432,-1.933991,15.956856,24.614909,28.503056,22.198245,50.562465,9.189014,-22.929787,-4.743303,17.666274,101.894201,-71.142533,-29.854897,2.225369,-57.626746,-64.800602,-22.220178,-3.947235,-36.740536,24.872878,4.280832,52.806561,-7.613357,22.775519,3.638372,44.347136,28.498066,3.178524,-22.430894,-10.269451,-23.425251,-13.204518,-21.253695,-11.529244,19.643425,10.342108,-14.697694,16.287212,-15.164488,27.945542,0.364056,8.235269,11.545509,31.272449,11.611649,-8.645747,65.290601,18.398333,6.373920,41.399356,56.744136,-30.812034,-6.895056,-1.627981,-3.869326,19.514809,2.200673,0.706182,-16.124756,12.892922,14.637518,10.108971,5.339695,17.161154,-12.460669,-48.553396,-34.032089,13.378056,25.951595,7.745497,11.051919,4.766523,-23.151112,-23.802545,17.692670,-5.879465,9.516797,-1.556398,-1.579726,3.966561,1.342347,14.881921,-3.421868,20.233762,-5.368327,44.937661,-48.820041,4.799741,-4.422375]

function gasCosts(receipt, trans_str) {
	var gasUsed = receipt.receipt.gasUsed;
	console.log(`Transaction: ${trans_str}`);
    console.log(`GasUsed: ${receipt.receipt.gasUsed}`);
}
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

contract ('AssetSwap', function (accounts) {

	let admin = accounts[0]

	let contracts = {
		"ETH" : {
			'assetID': '0',
			'prices': ETH_PRICES,
			'long_PNLS': LONG_ETH_PNL,
			'short_PNLS': SHORT_ETH_PNL,

		},
		"SPX" : {
			'assetID': '1',
			'prices': SPX_PRICES,
			'long_PNLS': LONG_SPX_PNL,
			'short_PNLS': SHORT_SPX_PNL
		},
		"BTC": {
			'assetID': '2',
			'prices': BTC_PRICES,
			'long_PNLS': LONG_BTC_PNL,
			'short_PNLS': SHORT_BTC_PNL
		},
		"ETHBTC": {
			'assetID': '3',
			'prices': ETHBTC_PRICES,
			'long_PNLS': LONG_ETHBTC_PNL,
			'short_PNLS': SHORT_ETHBTC_PNL
		}
	}

	var PRICE_INDEX = 1;

	const NUM_MAKERS = 1;
	const LONG_TAKERS = 1;
	const SHORT_TAKERS = 1;

	var swap;
	var factory;
	var oracle;
	var used_accounts = 1;

	for (const [i, contract] of Object.entries(contracts)) {
		contract.maker = accounts[used_accounts];
		used_accounts++;
		contract.long_takers = accounts.slice(used_accounts, LONG_TAKERS + used_accounts);
		used_accounts += contract.long_takers.length;
		contract.short_takers = accounts.slice(used_accounts, SHORT_TAKERS + used_accounts);
		used_accounts += contract.short_takers.length;
		contract.long_ids = new Array(contract.long_takers.length);
		contract.short_ids = new Array(contract.short_takers.length);
	}
	/*const maker = accounts[1];
	var used_accounts = 2;
	var takers = accounts.slice(used_accounts, NUM_TAKERS + used_accounts);
	used_accounts += takers.length;
	var ids = new Array(takers.length)*/

	it ("Should find all AssetSwap contracts", async function () {
		factory = await SwapFactory.deployed();
		for (const [i, contract] of Object.entries(contracts)) {
			contract.address = await factory.swapContracts(contract.assetID);
			contract.swap = await AssetSwap.at(contract.address);
			let swap_id = await contract.swap.ASSET_ID();
			assert.equal(swap_id, contract.assetID);
		}
		//console.log(contracts);
		
	});

	it ("Should set the proper FR", async function() {
		for (const [i, contract] of Object.entries(contracts)) {
			await contract.swap.setRates(15, 0, {from: admin});
			//await utils.timeTravel(60 * 60 * 24 * 4);
			//await contract.swap.computeReturns({from: admin});
		}

		/*await utils.timeTravel(60 * 60 * 24 * 4);
		for (const [i, contract] of Object.entries(contracts)) {
			await contract.swap.computeReturns({from: admin});
		}

		await utils.timeTravel(60 * 60 * 24 * 4);
		for (const [i, contract] of Object.entries(contracts)) {
			await contract.swap.computeReturns({from: admin});
		}*/

		/*await swap.setRates(15, 0, {from: admin});
		await swap.computeReturns({from: admin});
		await utils.timeTravel(60 * 60 * 24 * 4);
		await swap.computeReturns({from: admin});
		await utils.timeTravel(60 * 60 * 24 * 4);
		await swap.computeReturns({from: admin});
		await utils.timeTravel(60 * 60 * 24 * 4);*/
	});

	it ("Should find the oracle contract", async function () {
		oracle = await Oracle.deployed();
		let isAdmin = await oracle.admins(admin);
		assert.equal(isAdmin, true);
	});

	it ("Should set up the maker with 500 ETH margin", async function () {
		for (const [i, contract] of Object.entries(contracts)) {
			let makeAmount = web3.toWei(500, 'ether');
			let bookTx = await contract.swap.createBook(10, {from: contract.maker});
			let makeTx = await contract.swap.lpFund(contract.maker, {from: contract.maker, value: makeAmount});
			let bookData = await contract.swap.getBookData(contract.maker);
			assert.equal(bookData[1].toNumber(), makeAmount)
		}
		/*let makeAmount = web3.toWei(900, 'ether');
		let bookTx = await swap.createBook(10, {from: maker});
		let makeTx = await swap.lpFund(maker, {from: maker, value: makeAmount});
		let bookData = await swap.getBookData(maker);
		assert.equal(bookData[1].toNumber(), makeAmount)*/
	})

	it (`Should set up the long taker`, async function () {
		/*for (const [i, taker] of Object.entries(takers)) {
			let takeTx = await swap.take(maker, 10, true, {from: taker, value: web3.toWei(10, 'ether')});
			let id = takeTx.logs[0].args.id;
			ids[i] = id;
		}*/

		for (const [i, contract] of Object.entries(contracts)) {
			let takeAmount = 100;
			let takeTx = await contract.swap.take(contract.maker, takeAmount, true,
				{from:contract.long_takers[0], value: web3.toWei(takeAmount + 100, 'ether')});
			contract.long_ids[0] = takeTx.logs[0].args.id;
		}
		//let takeAmount = 100;
		//let takeTx1 = await swap.take(maker, takeAmount, true, {from: takers[0], value: web3.toWei(takeAmount, 'ether')});
		//ids[0] = takeTx1.logs[0].args.id;

	});

	it (`Should set up the short taker`, async function () {
		for (const [i, contract] of Object.entries(contracts)) {
			let takeAmount = 100;
			let takeTx = await contract.swap.take(contract.maker, takeAmount, false,
				{from:contract.short_takers[0], value: web3.toWei(takeAmount + 100, 'ether')});
			contract.short_ids[0] = takeTx.logs[0].args.id;
		}
	});

	it (`Should initialize all new contracts`, async function () {
		for (const [i, contract] of Object.entries(contracts)) {
			let priceTx = await contract.swap.priceInitialization(contract.maker, {from: admin});
			let subKInfo = await contract.swap.getSubcontractData(contract.maker, contract.long_ids[0]);
			//console.log("Day: ", subKInfo[2].toNumber());
			assert.equal(subKInfo[2].toNumber(), 1);
		}
	});

	it ("Should update all the oracles", async function() {
		await utils.timeTravel(60 * 60 * 24);
		for (const [i, contract] of Object.entries(contracts)) {
			await oracle.setIntraweekPrice(contract.assetID, Math.round(contract.prices[PRICE_INDEX] * 1e6), false, {from: admin});
			let newPrice = await oracle.getCurrentPrice(contract.assetID);
			assert.equal(newPrice.toNumber(), Math.round(contract.prices[PRICE_INDEX] * 1e6));
		}

	});

	/*it ("Should update the oracle for ETH", async function () {
		await utils.timeTravel(60 * 60 * 24); // one day
		let ethTX = await oracle.setIntraweekPrice(0, contracts.ETH.prices[PRICE_INDEX] * 1e6, false, {from: admin});
	});

	it ("Should update the oracle for SPX", async function () {
		let spxTX = await oracle.setIntraweekPrice(1, contracts.SPX.prices[PRICE_INDEX] * 1e6, false, {from: admin});
	});

	it ("Should update the oracle for BTC", async function () {
		let spxTX = await oracle.setIntraweekPrice(2, contracts.BTC.prices[PRICE_INDEX] * 1e6, false, {from: admin});
	});

	it ("Should update the oracle for ETHBTC", async function () {
		let spxTX = await oracle.setIntraweekPrice(3, contracts.ETHBTC.prices[PRICE_INDEX] * 1e6, false, {from: admin});
	});*/

	it ("Should advance the oracle a week", async function () {
		await utils.timeTravel(60 * 60 * 24); // one day
		//await oracle.setIntraweekPrice(0, 200e6, false, {from: admin});
		//await oracle.setIntraweekPrice(1, 2800e6, false, {from: admin});
		await utils.timeTravel(60 * 60 * 24 * 4); // 4 days into the future
		for (const [i, contract] of Object.entries(contracts)) {
			await oracle.setIntraweekPrice(contract.assetID, 1, true, {from: admin});
		}
		let eth = await oracle.getCurrentPrices(0,{from:admin});
		console.log('eth prices')
		console.log(eth);
		
		let spx = await oracle.getCurrentPrices(1,{from:admin});
		console.log('spx prices')
		console.log(spx);

		let btc = await oracle.getCurrentPrices(2,{from:admin});
		console.log('btc prices')
		console.log(btc);

		let ethbtc = await oracle.getCurrentPrices(3,{from:admin});
		console.log('ethbtc prices')
		console.log(ethbtc);

		//await oracle.setIntraweekPrice(0, 200e6, true);
		//await oracle.setIntraweekPrice(1, 2800e6, true);
		await utils.timeTravel(60 * 60 * 24); // one day
		for (const [i, contract] of Object.entries(contracts)) {
			await oracle.setSettlePrice(contract.assetID, Math.round(contract.prices[PRICE_INDEX + 1] * 1e6), {from: admin});
			let newPrice = await oracle.getCurrentPrice(contract.assetID);
			assert.equal(newPrice.toNumber(), Math.round(contract.prices[PRICE_INDEX + 1] * 1e6));
			console.log(newPrice);
		}
		/*await oracle.setSettlePrice(0, contracts.ETH.prices[PRICE_INDEX + 1] * 1e6);
		await oracle.setSettlePrice(1, contracts.SPX.prices[PRICE_INDEX + 1] * 1e6);
		await oracle.setSettlePrice(2, contracts.ETH.prices[PRICE_INDEX + 1] * 1e6);
		await oracle.setSettlePrice(3, contracts.SPX.prices[PRICE_INDEX + 1] * 1e6);*/
	});

	it ("Should compute returns", async function () {
		for (const [i, contract] of Object.entries(contracts)) {
			await contract.swap.computeReturns({from: admin});
			let longreturns = await contract.swap.takerLongReturns(1);
			let shortreturns = await contract.swap.takerShortReturns(1);
			console.log('Long returns for ' + contract.assetID)
			console.log(longreturns.toNumber());
			console.log('Short returns for ' + contract.assetID)
			console.log(shortreturns.toNumber());
		}
		//let returnsTx = await swap.computeReturns({from: admin});
	});

	it ("Should settle the maker", async function () {
		for (const [i, contract] of Object.entries(contracts)) {
			let settleTx = await contract.swap.settle(contract.maker, {from: admin});
		}
		//let settleTx = await swap.settle(maker, {from: admin});
		//gasCosts(settleTx, `Settlement`);
	});

	it ("Should correctly give the PNL for long returns", async function() {
		for (const [i, contract] of Object.entries(contracts)) {
			let subKInfo = await contract.swap.getSubcontractData(contract.maker, contract.long_ids[0]);
			let takerMargin = subKInfo[0].toNumber();
			let expectedpnl = contract.long_PNLS[PRICE_INDEX];
			let difference = takerMargin/1e18 - 200;
			console.log("On contract: " + contract.assetID);
			assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
		}
		/*let subKInfo1 = await swap.getSubcontractData(maker, ids[0]);
		let takermarg1 = subKInfo1[0].toNumber();
		let expectedpnl1 = 3.29646;
		let difference1 = takermarg1/1e18 - 100;
		assert.equal(difference1.toFixed(5), expectedpnl1);*/
	});

	it ("Should get the long PNL correct for ETH", async function (){
		let subKInfo = await contracts.ETH.swap.getSubcontractData(contracts.ETH.maker, contracts.ETH.long_ids[0]);
		let takerMargin = subKInfo[0].toNumber();
		let expectedpnl = contracts.ETH.long_PNLS[PRICE_INDEX];
		let difference = takerMargin/1e18 - 200;
		console.log("On contract ETH");
		// wrong by 12.5
		assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
	})

	it ("Should get the long PNL correct for SPX", async function (){
		let subKInfo = await contracts.SPX.swap.getSubcontractData(contracts.SPX.maker, contracts.SPX.long_ids[0]);
		let takerMargin = subKInfo[0].toNumber();
		let expectedpnl = contracts.SPX.long_PNLS[PRICE_INDEX];
		let difference = takerMargin/1e18 - 200;
		console.log("On contract SPX");
		assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
	})

	it ("Should get the long PNL correct for BTC", async function (){
		let subKInfo = await contracts.BTC.swap.getSubcontractData(contracts.BTC.maker, contracts.BTC.long_ids[0]);
		let takerMargin = subKInfo[0].toNumber();
		let expectedpnl = contracts.BTC.long_PNLS[PRICE_INDEX];
		let difference = takerMargin/1e18 - 200;
		console.log("On contract BTC");
		assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
	})

	it ("Should get the long PNL correct for ETHBTC", async function (){
		let subKInfo = await contracts.ETHBTC.swap.getSubcontractData(contracts.ETHBTC.maker, contracts.ETHBTC.long_ids[0]);
		let takerMargin = subKInfo[0].toNumber();
		let expectedpnl = contracts.ETHBTC.long_PNLS[PRICE_INDEX];
		let difference = takerMargin/1e18 - 200;
		console.log("On contract ETHBTC");
		assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
	})

	it ("Should correctly give the PNL for short returns", async function() {
		for (const [i, contract] of Object.entries(contracts)) {
			let subKInfo = await contract.swap.getSubcontractData(contract.maker, contract.short_ids[0]);
			let takerMargin = subKInfo[0].toNumber();
			let expectedpnl = contract.short_PNLS[PRICE_INDEX];
			let difference = takerMargin/1e18 - 200;
			console.log("On contract: " + contract.assetID);
			assert.equal(difference.toFixed(5), expectedpnl.toFixed(5));
			// wrong by 12.5
		}
	});

	/*it ("Should redeem a subcontract", async function () {
		let info = await swap.getSubcontractData(maker, ids[0]);
		let bookInfo = await swap.getBookData(maker);
		let redeemtx = await swap.redeem(maker, ids[0], {from: maker});
		gasCosts(redeemtx, "Redeeming one subcontract")
	})*/
})